version: "3"

services:
  # Serviço que irá rodar o node
  node:
    # Faz o build do Dockerfile da pasta atual e utiliza o resultado desse build
    # como a imagem do container
    build: .
    # Define um user específico, diferente de root para a execução dos comandos
    # user: eval
    # Nome do container para facilitar execução
    container_name: zoo_functions
    # Mesmo que `docker run -t`
    tty: true
    # Mesmo que `docker run -i`
    stdin_open: true
    # Substitui o comando padrão da imagem do node
    command: bash
    # Restarta a imagem caso algo a faça parar
    restart: always
    # Diretório padrão de execução
    working_dir: /app-backend
    # Lista de volumes (diretórios) mapeados de fora para dentro do container
    volumes:
      # Monta o diretório atual, com todos os dados do projeto, 
      # dentro do diretório /app
      - ./:/app-backend
    # Lista de serviços do qual este serviço depende
    depends_on:
      # Precisa do banco funcionando antes de subir o node
      - db
    # Lista de portas mapeadas de dentro para fora do container
    # na notação porta_de_fora:porta_de_dentro
    ports:
      # Expõe a porta padrão da aplicação: altere aqui caso use outra porta
      - 3000:3000
    # Configura as variáveis de ambiente dentro do container
    environment:
      MYSQL_USER: root
      MYSQL_PASSWORD: password
      MYSQL_HOST: db # Nome do service logo abaixo
      JWT_SECRET: secretJWT
      API_HOST: 'node'
      API_PORT: 3000
      NODE_ENV: 'development'
    networks:
      - zoo_functions_net

  # Serviço que irá rodar o banco de dados
  db:
    container_name: zoo_functions_db
    image: mysql:8.0.23
    # Indica de forma fixa a plataforma na qual o banco irá rodar
    platform: linux/x86_64
    restart: always
    ports:
      - 3306:3306
      - 33060:33060
    environment:
      MYSQL_ROOT_PASSWORD: password
    networks:
      - zoo_functions_net

# Lista de redes que os containeres irão utilizar
networks:
  zoo_functions_net:
    driver: bridge